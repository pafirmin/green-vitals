[{"/home/paul/Documents/code/carbon-intensity/src/index.js":"1","/home/paul/Documents/code/carbon-intensity/src/App.js":"2","/home/paul/Documents/code/carbon-intensity/src/GlobalStyle.js":"3","/home/paul/Documents/code/carbon-intensity/src/components/PostCodeForm.js":"4","/home/paul/Documents/code/carbon-intensity/src/services/requests.js":"5","/home/paul/Documents/code/carbon-intensity/src/components/charts/PieChart.js":"6","/home/paul/Documents/code/carbon-intensity/src/components/charts/Table.js":"7","/home/paul/Documents/code/carbon-intensity/src/components/utils/Loader.js":"8","/home/paul/Documents/code/carbon-intensity/src/components/energy-data/EnergyData.js":"9","/home/paul/Documents/code/carbon-intensity/src/components/pollution-data/PollutionData.js":"10","/home/paul/Documents/code/carbon-intensity/src/components/charts/BarChart.js":"11","/home/paul/Documents/code/carbon-intensity/src/components/layout/DataContainer.js":"12"},{"size":197,"mtime":1611615110656,"results":"13","hashOfConfig":"14"},{"size":1899,"mtime":1611681393894,"results":"15","hashOfConfig":"14"},{"size":297,"mtime":1611662439329,"results":"16","hashOfConfig":"14"},{"size":1234,"mtime":1611606135031,"results":"17","hashOfConfig":"14"},{"size":1206,"mtime":1611670058308,"results":"18","hashOfConfig":"14"},{"size":1620,"mtime":1611682060211,"results":"19","hashOfConfig":"14"},{"size":653,"mtime":1611685140737,"results":"20","hashOfConfig":"14"},{"size":958,"mtime":1611662697289,"results":"21","hashOfConfig":"14"},{"size":1554,"mtime":1611685819608,"results":"22","hashOfConfig":"14"},{"size":1614,"mtime":1611686693827,"results":"23","hashOfConfig":"14"},{"size":2188,"mtime":1611680118142,"results":"24","hashOfConfig":"14"},{"size":483,"mtime":1611686126109,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1fctmcc",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/paul/Documents/code/carbon-intensity/src/index.js",[],["54","55"],"/home/paul/Documents/code/carbon-intensity/src/App.js",["56"],"import React, { Fragment, useEffect, useState } from \"react\";\nimport services from \"./services/requests\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport PostCodeForm from \"./components/PostCodeForm\";\nimport EnergyData from \"./components/energy-data/EnergyData\";\nimport Loader from \"./components/utils/Loader\";\nimport PollutionData from \"./components/pollution-data/PollutionData\";\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [submitted, setSubmitted] = useState(false);\n  const [energyData, setEnergyData] = useState();\n  const [pollutionData, setPollutionData] = useState();\n  const [locationData, setLocationData] = useState({\n    admin_district: \"\",\n    outcode: \"\",\n    latitude: \"\",\n    longitude: \"\",\n  });\n\n  useEffect(() => {\n    if (submitted) {\n      fetchData();\n    }\n  }, [submitted, locationData]);\n\n  const fetchData = async () => {\n    try {\n      setLoading(true);\n\n      const { outcode, latitude, longitude } = locationData;\n\n      const [pollutionRes, energyRes] = await Promise.all([\n        services.fetchPollutionData(latitude, longitude),\n        services.fetchEnergeyData(outcode),\n      ]);\n\n      setEnergyData(energyRes);\n      setPollutionData(pollutionRes);\n    } catch (err) {\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Fragment>\n      <GlobalStyle />\n      {loading && <Loader />}\n      <div style={{ maxWidth: \"1100px\", margin: \"auto\" }}>\n        <PostCodeForm\n          setLocationData={setLocationData}\n          setSubmitted={setSubmitted}\n        />\n        <div style={{ margin: \"auto\" }}>\n          <h2 style={{ marginLeft: \"1rem\" }}>{locationData.admin_district}</h2>\n          {energyData && <EnergyData data={energyData} />}\n          {pollutionData && <PollutionData data={pollutionData} />}\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default App;\n","/home/paul/Documents/code/carbon-intensity/src/GlobalStyle.js",[],"/home/paul/Documents/code/carbon-intensity/src/components/PostCodeForm.js",[],"/home/paul/Documents/code/carbon-intensity/src/services/requests.js",[],"/home/paul/Documents/code/carbon-intensity/src/components/charts/PieChart.js",["57"],"import React, { useEffect, useRef } from \"react\";\n\nconst PieChart = ({ data, chartColours }) => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const ctx = canvasRef.current.getContext(\"2d\");\n    generatePie(ctx);\n  }, [data]);\n\n  const generatePie = (ctx) => {\n    clearCanvas(ctx);\n\n    let accum = 0;\n    data.forEach((obj) => {\n      drawSlice(ctx, accum, obj);\n      accum += obj.radians;\n    });\n  };\n\n  const drawSlice = (ctx, arcStart, obj) => {\n    const { label, perc, radians } = obj;\n    const canvas = canvasRef.current;\n    const [centerX, centerY] = [canvas.width / 2, canvas.height / 2];\n    const radius = (canvas.height / 2) * 0.75;\n    const arcEnd = arcStart + radians;\n\n    ctx.beginPath();\n    ctx.moveTo(centerX, centerY);\n    ctx.arc(centerX, centerY, radius, arcStart, arcEnd, false);\n    ctx.closePath();\n    ctx.fillStyle = chartColours[label];\n    ctx.fill();\n\n    const midPoint = arcStart + (arcEnd - arcStart) / 2;\n    const labelPos = radius * 1.1;\n    const labelX = centerX + labelPos * Math.cos(midPoint);\n    const labelY = centerY + labelPos * Math.sin(midPoint);\n\n    ctx.font = \".9rem arial\";\n    ctx.fontWeight = \"400\";\n    ctx.fillStyle = \"#fff\";\n    ctx.textAlign = labelX < centerX ? \"right\" : \"left\";\n    ctx.fillText(`${label}: ${perc}%`, labelX, labelY);\n  };\n\n  const clearCanvas = (ctx) => {\n    const canvas = canvasRef.current;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n  };\n\n  return (\n    <div>\n      <canvas ref={canvasRef} width=\"520\" height=\"400\"></canvas>\n    </div>\n  );\n};\n\nexport default PieChart;\n","/home/paul/Documents/code/carbon-intensity/src/components/charts/Table.js",[],"/home/paul/Documents/code/carbon-intensity/src/components/utils/Loader.js",[],"/home/paul/Documents/code/carbon-intensity/src/components/energy-data/EnergyData.js",[],"/home/paul/Documents/code/carbon-intensity/src/components/pollution-data/PollutionData.js",[],"/home/paul/Documents/code/carbon-intensity/src/components/charts/BarChart.js",["58"],"import React, { useEffect, useRef } from \"react\";\n\nconst BarChart = ({ data, colours }) => {\n  const canvasRef = useRef(null);\n  const BAR_WIDTH = 60;\n  const BAR_GAP = 10;\n  const MAX_VALUE = 60;\n  const LABEL_PADDING = 30;\n\n  useEffect(() => {\n    const ctx = canvasRef.current.getContext(\"2d\");\n\n    generateChart(ctx);\n  }, [data]);\n\n  const generateChart = (ctx) => {\n    clearCanvas(ctx);\n    const chartWidth = canvasRef.current.width;\n    const chartHeight = canvasRef.current.height - LABEL_PADDING;\n    ctx.font = \".9rem arial\";\n    ctx.fontWeight = \"400\";\n    ctx.fillStyle = \"#fff\";\n    ctx.strokeStyle = \"#fff\";\n    ctx.textAlign = \"right\";\n\n    // Draw X Axis\n    ctx.beginPath();\n    ctx.moveTo(LABEL_PADDING, chartHeight + 1);\n    ctx.lineTo(chartWidth, chartHeight + 1);\n    ctx.stroke();\n\n    // Draw Y Axis\n    ctx.beginPath();\n    ctx.moveTo(LABEL_PADDING, 1);\n    ctx.lineTo(LABEL_PADDING, chartHeight);\n    ctx.stroke();\n\n    // Draw Y values\n    for (let i = 1; i >= 0; i -= 0.15) {\n      const value = Math.round(MAX_VALUE * i);\n      const valueY = chartHeight - chartHeight * i;\n      ctx.fillText(value, 25, valueY);\n    }\n\n    // Draw bars\n    let accum = BAR_GAP + LABEL_PADDING;\n    data.forEach((obj) => {\n      drawBar(ctx, chartHeight, accum, obj);\n      accum += BAR_WIDTH + BAR_GAP;\n    });\n  };\n\n  const drawBar = (ctx, chartHeight, accum, obj) => {\n    const canvas = canvasRef.current;\n    const barProportion = (obj.value / MAX_VALUE) * 100;\n    const barHeight = (barProportion / 100) * chartHeight;\n    const rectX = accum;\n    const rectY = canvas.height - (barHeight + LABEL_PADDING);\n\n    // Draw bar\n    ctx.fillStyle = colours[obj.label];\n    ctx.fillRect(rectX, rectY, BAR_WIDTH, barHeight);\n\n    // Draw labels\n    const labelX = rectX + BAR_WIDTH / 2;\n    const labelY = rectY + barHeight + 20;\n\n    ctx.textAlign = \"center\";\n    ctx.fillStyle = \"#fff\";\n    ctx.fillText(`${obj.label}`, labelX, labelY);\n  };\n\n  const clearCanvas = (ctx) => {\n    const canvas = canvasRef.current;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n  };\n\n  return <canvas ref={canvasRef} width=\"520\" height=\"400\"></canvas>;\n};\n\nexport default BarChart;\n","/home/paul/Documents/code/carbon-intensity/src/components/layout/DataContainer.js",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":25,"column":6,"nodeType":"65","endLine":25,"endColumn":31,"suggestions":"66"},{"ruleId":"63","severity":1,"message":"67","line":9,"column":6,"nodeType":"65","endLine":9,"endColumn":12,"suggestions":"68"},{"ruleId":"63","severity":1,"message":"69","line":14,"column":6,"nodeType":"65","endLine":14,"endColumn":12,"suggestions":"70"},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["73"],"React Hook useEffect has a missing dependency: 'generatePie'. Either include it or remove the dependency array.",["74"],"React Hook useEffect has a missing dependency: 'generateChart'. Either include it or remove the dependency array.",["75"],"no-global-assign","no-unsafe-negation",{"desc":"76","fix":"77"},{"desc":"78","fix":"79"},{"desc":"80","fix":"81"},"Update the dependencies array to be: [submitted, locationData, fetchData]",{"range":"82","text":"83"},"Update the dependencies array to be: [data, generatePie]",{"range":"84","text":"85"},"Update the dependencies array to be: [data, generateChart]",{"range":"86","text":"87"},[824,849],"[submitted, locationData, fetchData]",[232,238],"[data, generatePie]",[328,334],"[data, generateChart]"]